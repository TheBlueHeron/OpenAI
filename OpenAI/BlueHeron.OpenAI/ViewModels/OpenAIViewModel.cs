using System.Globalization;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;

namespace BlueHeron.OpenAI.ViewModels;

/// <summary>
/// An <see cref="ObservableObject"/> that exposes bindable properties and <see cref="IRelayCommand"/>s for <see cref="ServiceConnector"/> and <see cref="ISpeechToText"/> functionality.
/// </summary>
public partial class OpenAIViewModel : ObservableObject
{
    #region Objects and variables

    private const string _MIC = "No microphone access!";
    private const string _NEWLINE = "\r\n\r\n";
    private const string _RESPONSESTART = ">  ";
    private const string _SPC = " ";

    private readonly ServiceConnector mConnector;
    private readonly ISpeechToText mSpeech;
    private readonly CancellationTokenSource mTokenSource;

    #endregion

    #region Properties

    /// <summary>
    /// The latest alert message generated by an operation.
    /// </summary>
    [ObservableProperty()]
    private string _alert = string.Empty;

    /// <summary>
    /// The latest answer received from the <see cref="ServiceConnector"/>.
    /// </summary>
    [ObservableProperty()]
    private string _answer = string.Empty;

    /// <summary>
    /// The culture to use when converting speech to text.
    /// </summary>
    [ObservableProperty()]
    private string _culture = "en-us";

    /// <summary>
    /// The latest question posted to the <see cref="ServiceConnector"/>.
    /// </summary>
    [ObservableProperty()]
    private string _question = string.Empty;

    #endregion

    #region Construction

    /// <summary>
    /// Creates a new <see cref="OpenAIViewModel"/>
    /// </summary>
    /// <param name="connector">The <see cref="ServiceConnector"/> to use</param>
    /// <param name="speech">The <see cref="ISpeechToText"/> to use</param>
    public OpenAIViewModel(ServiceConnector connector, ISpeechToText speech)
    {
        mConnector = connector;
        mSpeech = speech;
        mTokenSource = new CancellationTokenSource();
    }

    #endregion

    #region Commands

    /// <summary>
    /// The 'AnswerQuestion' command that calls <see cref="ServiceConnector.Answer(string)"/> and asynchronously and repeatedly updates the <see cref="Answer"/> property as it is received as a stream of string tokens.
    /// </summary>
    [RelayCommand]
    private async void AnswerQuestion()
    {
        Answer += _RESPONSESTART;
        await foreach (var t in mConnector.Answer(Question))
        {
            _ = await UpdateAnswer(t);
        }
        Answer += _NEWLINE;
    }

    /// <summary>
    /// Clears the chat and starts a new one.
    /// </summary>
    [RelayCommand]
    private void ClearChat()
    {
        Question = string.Empty;
        Answer = string.Empty;
        mConnector.ClearChat();
    }

    /// <summary>
    /// Clears the question.
    /// </summary>
    [RelayCommand]
    private void ClearQuestion()
    {
        Question = string.Empty;
    }

    /// <summary>
    /// Starts listening for speech input and generates the <see cref="Question"/> from it.
    /// </summary>
    [RelayCommand]
    private async void Listen()
    {
        var isAuthorized = await mSpeech.RequestPermissions();

        if (isAuthorized)
        {
            try
            {
                Question = await mSpeech.Listen(CultureInfo.GetCultureInfo(Culture), new Progress<string>(partialText =>
                    {
                        if (DeviceInfo.Platform == DevicePlatform.Android)
                        {
                            Question = partialText;
                        }
                        else
                        {
                            Question += partialText + _SPC;
                        }
                    }), mTokenSource.Token);
            }
            catch (Exception ex)
            {
                Alert = ex.Message;
            }
        }
        else
        {
            Alert = _MIC;
        }
    }

    /// <summary>
    /// Stops listening to speech input.
    /// </summary>
    public void ListenCancel()
    {
        mTokenSource?.Cancel();
    }
    
    #endregion

    #region Private methods and functions

    /// <summary>
    /// Asynchronously updates the <see cref="Answer"/> property.
    /// </summary>
    /// <param name="t">The next token</param>
    /// <returns><see langword="true"/></returns>
    private async Task<bool> UpdateAnswer(string t)
    {
        await Task.Run(() =>
        {
            Answer += t;
        });
        return true;
    }

    #endregion
}